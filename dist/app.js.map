{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * app.ts\n */\nimport * as domain from 'domain';\nimport * as express from 'express';\nimport { config } from './config';\nimport { Err } from './utils';\n\n// <middleware>\nimport * as bodyParser from 'body-parser';\nimport * as compress from 'compression';\nimport * as cookieParser from 'cookie-parser';\nimport * as csrf from 'csurf';\nimport * as hbs from 'express-handlebars';\nimport * as session from 'express-session';\nimport * as helmet from 'helmet';\nimport * as methodOverride from 'method-override';\nimport * as morgan from 'morgan';\n// </middleware>\n\n// <router>\nimport { mainRoute } from './routes';\n// </router>\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.init(); // 기본설정\n    this.middleware(); // 미들웨어\n    this.router(); // 라우팅\n    this.exception(); // 예외처리\n  }\n\n  private init(): void {\n    this.express.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\n      const d: domain.Domain = domain.create();\n      d.add(req);\n      d.add(res);\n      d.on('error', next);\n      d.run(next);\n    });\n\n    this.express.engine('html', hbs({ extname: '.html' }));\n    this.express.set('views', `${config.cwd}/views`);\n    this.express.set('view engine', 'html');\n    this.express.set('trust proxy', 1); // secure: true\n  }\n\n  private middleware(): void {\n    this.express.use(morgan(':remote-addr - \":method :url HTTP/:http-version\" ' +\n      ':status :res[content-length] \":referrer\" \":user-agent\"'));\n    this.express.use(compress({\n      filter(req: express.Request, res: express.Response): boolean {\n        return (/json|text|javascript|css/).test(res.getHeader('Content-Type'));\n      },\n      level: 9\n    }));\n    this.express.use(bodyParser.urlencoded({ extended: true }));\n    this.express.use(bodyParser.json());\n    this.express.use(methodOverride());\n    this.express.use(cookieParser());\n    this.express.use(session({\n      secret: 'tEsTeD',\n      resave: false,\n      saveUninitialized: true,\n      cookie: { secure: true }\n    }));\n    this.express.use(express.static(`${config.cwd}/public`));\n    this.express.use(helmet());\n\n    // 테스트 환경일 때 csrf 예외\n    if (this.express.get('env') !== 'test') {\n      this.express.use(csrf());\n      this.express.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\n        res.cookie('XSRF-TOKEN', req.csrfToken());\n        next();\n      });\n    }\n  }\n\n  private router(): void {\n    this.express.use('/', mainRoute);\n  }\n\n  private exception(): void {\n    // catch 404 and forwarding to error handler\n    this.express.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\n      const err: Err = new Err('NotFound', 404);\n      next(err);\n    });\n\n    // will print stacktrace\n    this.express.use((err: Err, req: express.Request, res: express.Response, next: express.NextFunction) => {\n      if (res.headersSent) {\n        return next(err);\n      }\n\n      if (err.name !== 'Error' || err.code) {\n        err.status = 500;\n      }\n\n      if (err.status === 500) {\n        console.error(err);\n        const message: string = `${req.method}: ${req.originalUrl}\\n` +\n          `IP> ${req.ip}, Body> ${JSON.stringify(req.body)}\\n` +\n          `Headers> ${JSON.stringify(req.headers)}\\n${err.stack}`;\n\n        // logger.error(message);\n        // mailer('uncaughtException', message);\n        console.error(message);\n      }\n\n      res.status(err.status || 400).json({ message: err.message });\n    });\n  }\n}\n\nexport const app: express.Application = new App().express;\n"]}